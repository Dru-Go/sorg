################################################################################
#
# ATOMS
#
# Short multimedia particles in the style of a tweet, but with a maximum length
# closer to a short blog post. New ones are published by editing this TOML file.
#
# Pull a timestamp from a shell with the `datejp` alias, then use Cmd-Y plus the
# "atom" snippet to insert an entry template.
#
################################################################################

# [[atoms]]
#   published_at = 2022-12-30T14:40:45-07:00
#   description = """\

# """

[[atoms]]
  published_at = 2022-12-30T10:38:12-07:00
  description = """\
The Calgary Zoo yesterday, somewhere I haven't been in years. The grounds feel smaller now, but the animals are impressive, and we got lucky with many out in the open. Amongst others:

* Extraordinary penguin exhibit -- lots of them, very active, and multiple locations indoors and out. (I wish I'd gotten some photos, but was holding coffee at the time.)
* Cougars jumping, climbing, and very lively. (The polar opposite of the snow leopards.)
* A gorilla couple with a young baby that attached itself to the mother's arm as she roamed.
* Two Komodo dragons, with one hanging out right in the open a few feet from the glass.
* A pack of wolves circling energetically within inches of the observation perch.
* A troupe of Japanese macaques, which I haven't seen since visiting Japan. (Too bad there wasn't an onsen.)
* An enormous [Malayan tapir](https://en.wikipedia.org/wiki/Malayan_tapir).
* The biggest Bactrian (two hump) camel any of us had ever seen. What a beast.

Although not as cold as last week (-30C), it was chilly out (-3C), and I've never been so thankful to for the butterfly conservatory's hot, humid interior (currently minus the butterflies for the winter season) for recharging body temperature.

I played around with exporting some iOS live photos and running them through ffmpeg to make some VP9/`.webm` shorts. It worked reasonably well, despite the idiosyncrasies of the `<video>` tag.
"""
  [[atoms.videos]]
    url = ["https://www.dropbox.com/s/s8h4b73m2fvx314/wolf-2.mp4?dl=1", "https://www.dropbox.com/s/uptkymissgj9h2t/wolf-2.webm?dl=1"]
  [[atoms.videos]]
    url = ["https://www.dropbox.com/s/6p8mo9jdj61nz6b/cougar-2.mp4?dl=1", "https://www.dropbox.com/s/ks8t5chwa7buc1r/cougar-2.webm?dl=1"]
  [[atoms.videos]]
    url = ["https://www.dropbox.com/s/4lroc5addmx2sax/cougar-1.mp4?dl=1", "https://www.dropbox.com/s/yf0c80zoxxpfrqp/cougar-1.webm?dl=1"]

# webm
# h265/hevc
# webp

# ffmpeg -ss 00:00:00.00 -to 00:00:01.90 -i IMG_0338/IMG_0338.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an IMG_0338/wolf-1.webm
# ffmpeg -ss 00:00:00.00 -to 00:00:01.90 -i IMG_0338/IMG_0338.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -an IMG_0338/wolf-1.mp4
# ffmpeg -ss 00:00:00.00 -to 00:00:01.90 -i IMG_0338/IMG_0338.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an IMG_0338/wolf-1.webp

# ffmpeg -ss 00:00:00.10 -to 00:00:01.85 -i IMG_0340/IMG_0340.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an IMG_0340/wolf-2.webm
# ffmpeg -ss 00:00:00.10 -to 00:00:01.85 -i IMG_0340/IMG_0340.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -an IMG_0340/wolf-2.mp4
# ffmpeg -ss 00:00:00.10 -to 00:00:01.85 -i IMG_0340/IMG_0340.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an IMG_0340/wolf-2.webp

# ffmpeg -ss 00:00:00.50 -to 00:00:02.60 -i IMG_0347/IMG_0347.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an IMG_0347/cougar-1.webm
# ffmpeg -ss 00:00:00.50 -to 00:00:02.60 -i IMG_0347/IMG_0347.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -an IMG_0347/cougar-1.mp4
# ffmpeg -ss 00:00:00.50 -to 00:00:02.60 -i IMG_0347/IMG_0347.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an IMG_0347/cougar-1.webp

# ffmpeg -ss 00:00:00.00 -to 00:00:03.10 -i IMG_0352/IMG_0352.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an IMG_0352/cougar-2.webm
# ffmpeg -ss 00:00:00.00 -to 00:00:03.10 -i IMG_0352/IMG_0352.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -an IMG_0352/cougar-2.mp4
# ffmpeg -ss 00:00:00.00 -to 00:00:03.10 -i IMG_0352/IMG_0352.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an IMG_0352/cougar-2.webp

[[atoms]]
  published_at = 2022-12-29T10:46:06-07:00
  description = """\
Follow up from yesterday's note on atom reslugging: [Short, friendly base32 slugs from timestamps](/fragments/base32-slugs), discussing how unique slugs are generated for each atom on this page.

A published timestamp is changed to bytes then encoded to base32 similar to [RFC 4648](https://www.ietf.org/rfc/rfc4648.txt), except with digits leading so that output slugs sort in the same order as the input timestamps. Implemented in ~4 lines of Go:

```  go
var lexicographicBase32 = "234567abcdefghijklmnopqrstuvwxyz"

var lexicographicBase32Encoding = base32.NewEncoding(lexicographicBase32).
		WithPadding(base32.NoPadding)

func atomSlug(publishedAt time.Time) string {
	i := big.NewInt(publishedAt.Unix())
	return lexicographicBase32Encoding.EncodeToString(i.Bytes())
}
```
"""

[[atoms]]
  published_at = 2022-12-28T22:54:44-07:00
  description = """\
In the unlikely chance that you happen to be following this in an RSS reader, you just got dump of every atom written so far all over again. Sorry about that. It happened because I "reslugged" (assigned a new URL-friendly identifier) them all, making your reader think each was new content. I normally wouldn't make a breaking change like that, but there was an improvement opportunity I couldn't resist, and the project is only a few days old, so I went for it. It'll be the last time something like that happens.

Each atom's slug is its published timestamp converted to bytes and base32-encoded (e.g. this atom's is `giqmrd2`). I changed the encoding character set from the normal `abcdefghijklmnopqrstuvwxyz234567` to my own numbers-first variant of `234567abcdefghijklmnopqrstuvwxyz`. The _reason_ I did that is so base32-encoded slugs always sort lexicographically the same as their source timestamps, which is quite a convenient property. More on this in a short piece tomorrow.
"""

[[atoms]]
  published_at = 2022-12-28T14:08:13-07:00
  description = """\
I updated my [now](/now) page for the first time in almost three years. It may have been an awful couple years, but at least a great week for this site?
"""

[[atoms]]
  published_at = 2022-12-28T13:30:22-07:00
  description = """\
> Write as often as possible, not with the idea at once of getting into print, but as if you were learning an instrument.

â€” _J.B. Priestley_

My prose output in 2022 was way down (not counting commit messages and Reddit comments), and I feel this viscerally. The less you do it, the harder it gets, leading to a vicious negative feedback loop. Come 2023, I want to invert that cycle. Write more and more often, and gods willing, make it better, and easier.
"""

[[atoms]]
  published_at = 2022-12-28T10:56:36-07:00
  description = """\
Published fragment: [_Easy, alternative soft deletion: `deleted_record_insert`_](/fragments/deleted-record-insert).

We've switched away from traditional soft deletion using a `deleted_at` column which is wound into every query like `deleted_at IS NULL` to one that uses a schemaless `deleted_record` table that's still useful for debugging, but doesn't need to be threaded in throughout production code, and razes a whole class of bugs involving forgotten `deleted_at IS NULL` predicates or foreign key problems (see [_Soft deletion probably isn't worth it_](/soft-deletion)).

I recommend the use of a generic insertion function:

``` sql
CREATE FUNCTION deleted_record_insert() RETURNS trigger
    LANGUAGE plpgsql
AS $$
    BEGIN
        EXECUTE 'INSERT INTO deleted_record (data, object_id, table_name)
          VALUES ($1, $2, $3)'
        USING to_jsonb(OLD.*), OLD.id, TG_TABLE_NAME;

        RETURN OLD;
    END;
$$;
```

Which can then be used as an `AFTER DELETE` trigger on any table:

``` sql
CREATE TRIGGER deleted_record_insert AFTER DELETE ON invoice
    FOR EACH ROW EXECUTE FUNCTION deleted_record_insert();
```

Our results have been shockingly good. No bugs to speak of, no reduction in operational visibility, and less friction in writing new code and analytics.
"""

[[atoms]]
  published_at = 2022-12-27T14:31:33-07:00
  description = """\
I wrote some meta-commentary about this Atoms list in a fragment: [_The Unpursuit of clout_](/fragments/unpursuit-of-clout).

The broad thesis is that publishing here is a little harder than publishing on Twitter (it involves a macro to insert an entry in a TOML file and doing a `git push`), but over the last few days which are this project's lifespan to date, I've been finding it easier. With no favs, likes, subtweets, or comments, you're not performing for anybody, and not gaming any metrics. Just write, publish.
"""

[[atoms]]
  published_at = 2022-12-26T23:02:08-07:00
  description = """\
As is traditional, Ruby 3.2 was [released on Christmas day](https://www.ruby-lang.org/en/news/2022/12/25/ruby-3-2-0-released/). The big news is that Shopify's YJIT (Yet Another Ruby JIT) engine is out of experimental status and now considered production ready, having been battle-tested at Shopify for a year.  As [CEO Tobi notes](https://twitter.com/tobi/status/1605663610906152960):

> Very good chance that YJIT is now running more ruby net code than any other VM. Shopify storefronts are a sizeable percentage of all web traffic!

Benchmarks show a performance improvement of ~40% over CRuby, so it's exciting for all Ruby users, including us. I can't imagine not looking into switching to JYIT in the new year.

Alongside Sorbet, Stripe was also working on a JIT, but with YJIT mainline, I think it's safe to say that theirs stays Stripeware (if it's even still being developed). Shopify's demonstrated a healthier model for working with open-source projects -- by maintaining close connection with the core teams (including Rails as well), their work goes upstream, and comes under the umbrella of collective maintenance. Stripe's projects are in danger of ending up more like [Facebook's Hack](https://en.wikipedia.org/wiki/Hack_(programming_language)), diverging far enough from the trunk to become a separate ecosystem.

Also nice to see is that YJIT is written in Rust, after a successful port [in April](https://github.com/ruby/ruby/commit/f90549cd38518231a6a74432fe1168c943a7cc18). This in opposition to Stripe's commitment to a C++ toolchain, and likely to keep the project more maintainable and more sustainable (and hopefully extend these properties to Ruby itself as it makes inroads to core, which is heavy C).
"""

[[atoms]]
  published_at = 2022-12-26T14:49:30-07:00
  description = """\
I wrote a mini-review for [_The Way of Water_](/fragments/way-of-water), the latest in the Avatar franchise. Go for the cutting edge CG of blue aliens and Pandora whales, stay for the 22nd century _Spruce Goose_-esque flying boat, crab mechs, and v2.0 exoskeletons.
"""

[[atoms]]
  published_at = 2022-12-26T11:21:56-07:00
  description = """\
The latest [Twitter files](https://twitter.com/davidzweig/status/1607378386338340867) by way of David Zweig, on the suppression of Covid information (and actually, read this [long form version](https://www.thefp.com/p/how-twitter-rigged-the-covid-debate) instead).

A few days ago [Elon Musk appeared on All-in](https://www.youtube.com/watch?v=HE5CTKqWEV0), and put it best: "all the conspiracy theories about Twitter turned out to be true". It was apparent to anyone paying attention that Twitter was censoring true statements inconvenient to the story being told by Fauci and the White House, despite vehement denial from all parties involved. As with previous iterations, the Twitter files aren't about knowing a murder had taken place, but rather about finding the smoking gun with fingerprints intact.
"""

[[atoms]]
  published_at = 2022-12-26T01:17:19-07:00
  description = """\
A thought-provoking [interview with John Mearsheimer](https://www.youtube.com/watch?v=HBiV1h7Dm5E), a decorated political scientist, and rare dissenting voice on the war in Ukraine. He believes there's an imminent danger of escalation, and makes the case for suing for diplomatic resolution.
"""

[[atoms]]
  published_at = 2022-12-25T23:55:16-07:00
  description = """\
In San Francisco, properties assessed at a total of $59 billion have [requested resassessment in 2022](https://archive.vn/ma4Nk), having correctly recognized that owning downtown isn't as valuable of a proposition as it was in 2020. Adjustment would bring the total down to $26 billion, translating to $308 million in lost property tax revenue should all their reassessments succeed. Add that to the already identified $728 million hole in the budget over the next two years.

Claimed by the article: San Francisco is slow to return to work due to a high concentration of "tech and professional services".

Omitted from the article: after spending a decade spent increasing tax and slathering on red tape, San Francisco locks down earliest in the nation, and for the longest, keeping major restrictions in place until just a few months ago. Add decades worth of obstructionism having contributed to some of the priciest rents and real estate on the planet, in a major surprise young workers didn't find it a compelling place to hunker down for three years of life in stasis, and businesses didn't find it compelling to sit on three years worth of empty offices.

The good news: San Franciscans achieved their final victory in driving out The Bad People. The bad: rents are as high as ever, the budget is a smoking crater in the ground, and the 70s didn't come back.
"""

[[atoms]]
  published_at = 2022-12-25T14:07:58-07:00
  description = """\
The other day I found that my automated job to cross-post to a toy Spring '83 board started failing, with the reason being that my last [sequences](/sequences) entry was more than 22 days ago. Not good -- I'd intended to keep them more up-to-date than that -- but I don't always have anything new to post.

I've always like the idea of `.plan` files, tiny plaintext files that live in a user's home directory and which would be dumped using the `finger` command on a target user. Famously, John Carmack published them for [more than a decade](https://github.com/ESWAT/john-carmack-plan-archive). Here, in a similar spirit to `.plan`, introduce "atoms", tiny multimedia particles that are fast and easy to write. Along with sequence entries, they're cross-posted to Spring '83, and will also live at [`/atoms`](/atoms).
"""

[[atoms]]
  published_at = 2022-12-25T12:31:12-07:00
  description = """\
Xmas morning. A signature gift was a new Zojirushi rice cooker, so I'll graduating from cooking rice in my old steamer (even if you don't recognize the name, their elephant logo is conspicuous worldwide).

Zojirushi reminds me of the old Heroku office at 321 11th St, where we had a number of their vacuum boilers. They'd keep water at perfect coffee-brewing temperature, ready to make a Chemex pourover at any moment.
"""